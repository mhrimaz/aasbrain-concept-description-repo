# # generated by datamodel-codegen:
# #   filename:  aas.json
# #   timestamp: 2023-10-09T16:19:20+00:00
#
# from __future__ import annotations
#
# from enum import Enum
# from typing import Any, List, Optional, Union
#
# from pydantic import BaseModel, Field, constr
#
#
# class AasSubmodelElements(Enum):
#     AnnotatedRelationshipElement = "AnnotatedRelationshipElement"
#     BasicEventElement = "BasicEventElement"
#     Blob = "Blob"
#     Capability = "Capability"
#     DataElement = "DataElement"
#     Entity = "Entity"
#     EventElement = "EventElement"
#     File = "File"
#     MultiLanguageProperty = "MultiLanguageProperty"
#     Operation = "Operation"
#     Property = "Property"
#     Range = "Range"
#     ReferenceElement = "ReferenceElement"
#     RelationshipElement = "RelationshipElement"
#     SubmodelElement = "SubmodelElement"
#     SubmodelElementCollection = "SubmodelElementCollection"
#     SubmodelElementList = "SubmodelElementList"
#
#
# class AbstractLangString(BaseModel):
#     language: constr()
#     text: constr(
#         min_length=1,
#     )
#
#
# class Version(BaseModel):
#     pass
#
#
# class Revision(BaseModel):
#     pass
#
#
# class AssetKind(Enum):
#     Instance = "Instance"
#     NotApplicable = "NotApplicable"
#     Type = "Type"
#
#
# class ContentType(BaseModel):
#     pass
#
#
# class DataTypeDefXsd(Enum):
#     xs_anyURI = "xs:anyURI"
#     xs_base64Binary = "xs:base64Binary"
#     xs_boolean = "xs:boolean"
#     xs_byte = "xs:byte"
#     xs_date = "xs:date"
#     xs_dateTime = "xs:dateTime"
#     xs_decimal = "xs:decimal"
#     xs_double = "xs:double"
#     xs_duration = "xs:duration"
#     xs_float = "xs:float"
#     xs_gDay = "xs:gDay"
#     xs_gMonth = "xs:gMonth"
#     xs_gMonthDay = "xs:gMonthDay"
#     xs_gYear = "xs:gYear"
#     xs_gYearMonth = "xs:gYearMonth"
#     xs_hexBinary = "xs:hexBinary"
#     xs_int = "xs:int"
#     xs_integer = "xs:integer"
#     xs_long = "xs:long"
#     xs_negativeInteger = "xs:negativeInteger"
#     xs_nonNegativeInteger = "xs:nonNegativeInteger"
#     xs_nonPositiveInteger = "xs:nonPositiveInteger"
#     xs_positiveInteger = "xs:positiveInteger"
#     xs_short = "xs:short"
#     xs_string = "xs:string"
#     xs_time = "xs:time"
#     xs_unsignedByte = "xs:unsignedByte"
#     xs_unsignedInt = "xs:unsignedInt"
#     xs_unsignedLong = "xs:unsignedLong"
#     xs_unsignedShort = "xs:unsignedShort"
#
#
# class DataTypeIec61360(Enum):
#     BLOB = "BLOB"
#     BOOLEAN = "BOOLEAN"
#     DATE = "DATE"
#     FILE = "FILE"
#     HTML = "HTML"
#     INTEGER_COUNT = "INTEGER_COUNT"
#     INTEGER_CURRENCY = "INTEGER_CURRENCY"
#     INTEGER_MEASURE = "INTEGER_MEASURE"
#     IRDI = "IRDI"
#     IRI = "IRI"
#     RATIONAL = "RATIONAL"
#     RATIONAL_MEASURE = "RATIONAL_MEASURE"
#     REAL_COUNT = "REAL_COUNT"
#     REAL_CURRENCY = "REAL_CURRENCY"
#     REAL_MEASURE = "REAL_MEASURE"
#     STRING = "STRING"
#     STRING_TRANSLATABLE = "STRING_TRANSLATABLE"
#     TIME = "TIME"
#     TIMESTAMP = "TIMESTAMP"
#
#
# class Direction(Enum):
#     input = "input"
#     output = "output"
#
#
# class EntityType(Enum):
#     CoManagedEntity = "CoManagedEntity"
#     SelfManagedEntity = "SelfManagedEntity"
#
#
# class Value(BaseModel):
#     pass
#
#
# class KeyTypes(Enum):
#     AnnotatedRelationshipElement = "AnnotatedRelationshipElement"
#     AssetAdministrationShell = "AssetAdministrationShell"
#     BasicEventElement = "BasicEventElement"
#     Blob = "Blob"
#     Capability = "Capability"
#     ConceptDescription = "ConceptDescription"
#     DataElement = "DataElement"
#     Entity = "Entity"
#     EventElement = "EventElement"
#     File = "File"
#     FragmentReference = "FragmentReference"
#     GlobalReference = "GlobalReference"
#     Identifiable = "Identifiable"
#     MultiLanguageProperty = "MultiLanguageProperty"
#     Operation = "Operation"
#     Property = "Property"
#     Range = "Range"
#     Referable = "Referable"
#     ReferenceElement = "ReferenceElement"
#     RelationshipElement = "RelationshipElement"
#     Submodel = "Submodel"
#     SubmodelElement = "SubmodelElement"
#     SubmodelElementCollection = "SubmodelElementCollection"
#     SubmodelElementList = "SubmodelElementList"
#
#
# class LangStringDefinitionTypeIec61360(AbstractLangString):
#     text: Optional[Any] = None
#
#
# class LangStringNameType(AbstractLangString):
#     text: Optional[Any] = None
#
#
# class LangStringPreferredNameTypeIec61360(AbstractLangString):
#     text: Optional[Any] = None
#
#
# class LangStringShortNameTypeIec61360(AbstractLangString):
#     text: Optional[Any] = None
#
#
# class LangStringTextType(AbstractLangString):
#     text: Optional[Any] = None
#
#
# class LevelType(BaseModel):
#     min: bool
#     nom: bool
#     typ: bool
#     max: bool
#
#
# class ModelType(Enum):
#     AnnotatedRelationshipElement = "AnnotatedRelationshipElement"
#     AssetAdministrationShell = "AssetAdministrationShell"
#     BasicEventElement = "BasicEventElement"
#     Blob = "Blob"
#     Capability = "Capability"
#     ConceptDescription = "ConceptDescription"
#     DataSpecificationIec61360 = "DataSpecificationIec61360"
#     Entity = "Entity"
#     File = "File"
#     MultiLanguageProperty = "MultiLanguageProperty"
#     Operation = "Operation"
#     Property = "Property"
#     Range = "Range"
#     ReferenceElement = "ReferenceElement"
#     RelationshipElement = "RelationshipElement"
#     Submodel = "Submodel"
#     SubmodelElementCollection = "SubmodelElementCollection"
#     SubmodelElementList = "SubmodelElementList"
#
#
# class ModellingKind(Enum):
#     Instance = "Instance"
#     Template = "Template"
#
#
# class QualifierKind(Enum):
#     ConceptQualifier = "ConceptQualifier"
#     TemplateQualifier = "TemplateQualifier"
#     ValueQualifier = "ValueQualifier"
#
#
# class IdShort(BaseModel):
#     pass
#
#
# class ReferenceTypes(Enum):
#     ExternalReference = "ExternalReference"
#     ModelReference = "ModelReference"
#
#
# class Path(BaseModel):
#     pass
#
#
# class Resource(BaseModel):
#     path: Path
#     contentType: Optional[ContentType] = None
#
#
# class StateOfEvent(Enum):
#     off = "off"
#     on = "on"
#
#
# class DataSpecificationContent(BaseModel):
#     modelType: ModelType
#
#
# class HasKind(BaseModel):
#     kind: Optional[ModellingKind] = None
#
#
# class Key(BaseModel):
#     type: KeyTypes
#     value: constr(
#         min_length=1,
#         max_length=2000,
#     )
#
#
# class Reference(BaseModel):
#     type: ReferenceTypes
#     referredSemanticId: Optional[Reference] = None
#     keys: List[Key] = Field(..., min_items=1)
#
#
# class ValueReferencePair(BaseModel):
#     value: constr(
#         min_length=1,
#         max_length=2000,
#     )
#     valueId: Reference
#
#
# class EventPayload(BaseModel):
#     source: Reference
#     sourceSemanticId: Optional[Reference] = None
#     observableReference: Reference
#     observableSemanticId: Optional[Reference] = None
#     topic: Optional[
#         constr(
#             min_length=1,
#             max_length=255,
#         )
#     ] = None
#     subjectId: Optional[Reference] = None
#     timeStamp: constr()
#     payload: Optional[str] = None
#
#
# class HasSemantics(BaseModel):
#     semanticId: Optional[Reference] = None
#     supplementalSemanticIds: Optional[List[Reference]] = Field(None, min_items=1)
#
#
# class Qualifier(HasSemantics):
#     kind: Optional[QualifierKind] = None
#     type: constr(
#         min_length=1,
#         max_length=128,
#     )
#     valueType: DataTypeDefXsd
#     value: Optional[str] = None
#     valueId: Optional[Reference] = None
#
#
# class SpecificAssetId(HasSemantics):
#     name: constr(
#         min_length=1,
#         max_length=64,
#     )
#     value: constr(
#         min_length=1,
#         max_length=2000,
#     )
#     externalSubjectId: Optional[Reference] = None
#
#
# class ValueList(BaseModel):
#     valueReferencePairs: List[ValueReferencePair] = Field(..., min_items=1)
#
#
# class AssetInformation(BaseModel):
#     assetKind: AssetKind
#     globalAssetId: Optional[
#         constr(
#             min_length=1,
#             max_length=2000,
#         )
#     ] = None
#     specificAssetIds: Optional[List[SpecificAssetId]] = Field(None, min_items=1)
#     assetType: Optional[
#         constr(
#             min_length=1,
#             max_length=2000,
#         )
#     ] = None
#     defaultThumbnail: Optional[Resource] = None
#
#
# class DataSpecificationIec61360(DataSpecificationContent):
#     preferredName: List[LangStringPreferredNameTypeIec61360] = Field(..., min_items=1)
#     shortName: Optional[List[LangStringShortNameTypeIec61360]] = Field(
#         None, min_items=1
#     )
#     unit: Optional[
#         constr(
#             min_length=1,
#         )
#     ] = None
#     unitId: Optional[Reference] = None
#     sourceOfDefinition: Optional[
#         constr(
#             min_length=1,
#         )
#     ] = None
#     symbol: Optional[
#         constr(
#             min_length=1,
#         )
#     ] = None
#     dataType: Optional[DataTypeIec61360] = None
#     definition: Optional[List[LangStringDefinitionTypeIec61360]] = Field(
#         None, min_items=1
#     )
#     valueFormat: Optional[
#         constr(
#             min_length=1,
#         )
#     ] = None
#     valueList: Optional[ValueList] = None
#     value: Optional[
#         constr(
#             min_length=1,
#             max_length=2000,
#         )
#     ] = None
#     levelType: Optional[LevelType] = None
#     modelType: str = Field("DataSpecificationIec61360", const=True)
#
#
# class Extension(HasSemantics):
#     name: constr(
#         min_length=1,
#         max_length=128,
#     )
#     valueType: Optional[DataTypeDefXsd] = None
#     value: Optional[str] = None
#     refersTo: Optional[List[Reference]] = Field(None, min_items=1)
#
#
# class HasExtensions(BaseModel):
#     extensions: Optional[List[Extension]] = Field(None, min_items=1)
#
#
# class Qualifiable(BaseModel):
#     qualifiers: Optional[List[Qualifier]] = Field(None, min_items=1)
#     modelType: ModelType
#
#
# class Referable(HasExtensions):
#     category: Optional[
#         constr(
#             min_length=1,
#             max_length=128,
#         )
#     ] = None
#     idShort: Optional[IdShort] = None
#     displayName: Optional[List[LangStringNameType]] = Field(None, min_items=1)
#     description: Optional[List[LangStringTextType]] = Field(None, min_items=1)
#     modelType: ModelType
#
#
# class DataSpecificationContentChoice(BaseModel):
#     __root__: DataSpecificationIec61360
#
#
# class EmbeddedDataSpecification(BaseModel):
#     dataSpecification: Reference
#     dataSpecificationContent: DataSpecificationContentChoice
#
#
# class HasDataSpecification(BaseModel):
#     embeddedDataSpecifications: Optional[List[EmbeddedDataSpecification]] = Field(
#         None, min_items=1
#     )
#
#
# class SubmodelElement(Referable, HasSemantics, Qualifiable, HasDataSpecification):
#     pass
#
#
# class AdministrativeInformation(HasDataSpecification):
#     version: Optional[Version] = None
#     revision: Optional[Revision] = None
#     creator: Optional[Reference] = None
#     templateId: Optional[
#         constr(
#             min_length=1,
#             max_length=2000,
#         )
#     ] = None
#
#
# class Capability(SubmodelElement):
#     modelType: str = Field("Capability", const=True)
#
#
# class DataElement(BaseModel):
#     __root__: SubmodelElement
#
#
# class EventElement(BaseModel):
#     __root__: SubmodelElement
#
#
# class File(BaseModel):
#     value: Optional[Value] = None
#     contentType: ContentType
#     modelType: str = Field("File", const=True)
#
#
# class Identifiable(Referable):
#     administration: Optional[AdministrativeInformation] = None
#     id: constr(
#         min_length=1,
#         max_length=2000,
#     )
#
#
# class MultiLanguageProperty(BaseModel):
#     value: Optional[List[LangStringTextType]] = Field(None, min_items=1)
#     valueId: Optional[Reference] = None
#     modelType: str = Field("MultiLanguageProperty", const=True)
#
#
# class Property(BaseModel):
#     valueType: DataTypeDefXsd
#     value: Optional[str] = None
#     valueId: Optional[Reference] = None
#     modelType: str = Field("Property", const=True)
#
#
# class Range(BaseModel):
#     valueType: DataTypeDefXsd
#     min: Optional[str] = None
#     max: Optional[str] = None
#     modelType: str = Field("Range", const=True)
#
#
# class ReferenceElement(BaseModel):
#     value: Optional[Reference] = None
#     modelType: str = Field("ReferenceElement", const=True)
#
#
# class RelationshipElementAbstract(SubmodelElement):
#     first: Reference
#     second: Reference
#
#
# class AssetAdministrationShell(Identifiable, HasDataSpecification):
#     derivedFrom: Optional[Reference] = None
#     assetInformation: AssetInformation
#     submodels: Optional[List[Reference]] = Field(None, min_items=1)
#     modelType: str = Field("AssetAdministrationShell", const=True)
#
#
# class BasicEventElement(BaseModel):
#     observed: Reference
#     direction: Direction
#     state: StateOfEvent
#     messageTopic: Optional[
#         constr(
#             min_length=1,
#             max_length=255,
#         )
#     ] = None
#     messageBroker: Optional[Reference] = None
#     lastUpdate: Optional[constr()] = None
#     minInterval: Optional[constr()] = None
#     maxInterval: Optional[constr()] = None
#     modelType: str = Field("BasicEventElement", const=True)
#
#
# class Blob(BaseModel):
#     value: Optional[str] = None
#     contentType: ContentType
#     modelType: str = Field("Blob", const=True)
#
#
# class ConceptDescription(Identifiable, HasDataSpecification):
#     isCaseOf: Optional[List[Reference]] = Field(None, min_items=1)
#     modelType: str = Field("ConceptDescription", const=True)
#
#
# class DataElementChoice(BaseModel):
#     __root__: Union[
#         Blob, File, MultiLanguageProperty, Property, Range, ReferenceElement
#     ]
#
#
# class RelationshipElement(RelationshipElementAbstract):
#     modelType: str = Field("RelationshipElement", const=True)
#
#
# class AnnotatedRelationshipElement(RelationshipElementAbstract):
#     annotations: Optional[List[DataElementChoice]] = Field(None, min_items=1)
#     modelType: str = Field("AnnotatedRelationshipElement", const=True)
#
#
# class RelationshipElementChoice(BaseModel):
#     __root__: Union[RelationshipElement, AnnotatedRelationshipElement]
#
#
# class Entity(SubmodelElement):
#     statements: Optional[List[SubmodelElementChoice]] = Field(None, min_items=1)
#     entityType: EntityType
#     globalAssetId: Optional[
#         constr(
#             min_length=1,
#             max_length=2000,
#         )
#     ] = None
#     specificAssetIds: Optional[List[SpecificAssetId]] = Field(None, min_items=1)
#     modelType: str = Field("Entity", const=True)
#
#
# class Environment(BaseModel):
#     assetAdministrationShells: Optional[List[AssetAdministrationShell]] = Field(
#         None, min_items=1
#     )
#     submodels: Optional[List[Submodel]] = Field(None, min_items=1)
#     conceptDescriptions: Optional[List[ConceptDescription]] = Field(None, min_items=1)
#
#
# class Operation(SubmodelElement):
#     inputVariables: Optional[List[OperationVariable]] = Field(None, min_items=1)
#     outputVariables: Optional[List[OperationVariable]] = Field(None, min_items=1)
#     inoutputVariables: Optional[List[OperationVariable]] = Field(None, min_items=1)
#     modelType: str = Field("Operation", const=True)
#
#
# class OperationVariable(BaseModel):
#     value: SubmodelElementChoice
#
#
# class Submodel(Identifiable, HasKind, HasSemantics, Qualifiable, HasDataSpecification):
#     submodelElements: Optional[List[SubmodelElementChoice]] = Field(None, min_items=1)
#     modelType: str = Field("Submodel", const=True)
#
#
# class SubmodelElementCollection(SubmodelElement):
#     value: Optional[List[SubmodelElementChoice]] = Field(None, min_items=1)
#     modelType: str = Field("SubmodelElementCollection", const=True)
#
#
# class SubmodelElementList(SubmodelElement):
#     orderRelevant: Optional[bool] = None
#     semanticIdListElement: Optional[Reference] = None
#     typeValueListElement: AasSubmodelElements
#     valueTypeListElement: Optional[DataTypeDefXsd] = None
#     value: Optional[List[SubmodelElementChoice]] = Field(None, min_items=1)
#     modelType: str = Field("SubmodelElementList", const=True)
#
#
# class SubmodelElementChoice(BaseModel):
#     __root__: Union[
#         RelationshipElement,
#         AnnotatedRelationshipElement,
#         BasicEventElement,
#         Blob,
#         Capability,
#         Entity,
#         File,
#         MultiLanguageProperty,
#         Operation,
#         Property,
#         Range,
#         ReferenceElement,
#         SubmodelElementCollection,
#         SubmodelElementList,
#     ]
#
#
# class AssetAdministrationShellEnvironment(Environment):
#     pass
#
#
# Reference.update_forward_refs()
# Entity.update_forward_refs()
# Environment.update_forward_refs()
# Operation.update_forward_refs()
# OperationVariable.update_forward_refs()
# Submodel.update_forward_refs()
# SubmodelElementCollection.update_forward_refs()
# SubmodelElementList.update_forward_refs()
# AssetAdministrationShellEnvironment.update_forward_refs()
